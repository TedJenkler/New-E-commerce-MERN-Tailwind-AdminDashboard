import { TypeOf, AssertDelegate, AnyAssertFunc } from "../types";
export declare type LiteralType = string | number | boolean | undefined | null | bigint;
export declare type LiteralValues<ArrT extends LiteralType[]> = (ArrT extends Array<infer T> ? T : never);
export declare function literal<ArrT extends LiteralType[]>(...arr: ArrT): (AssertDelegate<LiteralValues<ArrT>>);
export declare function excludeLiteral<F extends AnyAssertFunc, ArrT extends LiteralType[]>(assert: F, ...arr: ArrT): (AssertDelegate<Exclude<TypeOf<F>, LiteralValues<ArrT>>>);
export declare function boolean(): AssertDelegate<boolean>;
export declare function unsafeNumber(): AssertDelegate<number>;
export declare function string(): AssertDelegate<string>;
export declare function nil(): AssertDelegate<null>;
export declare function undef(): AssertDelegate<undefined>;
export declare function undefToNil(): AssertDelegate<null>;
export declare function nilToUndef(): AssertDelegate<undefined>;
export declare function any(): AssertDelegate<any>;
export declare function unknown(): AssertDelegate<unknown>;
