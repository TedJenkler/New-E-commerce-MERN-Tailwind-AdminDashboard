import { Optional } from "./Optional";
export declare class TypeUtil {
    static Check<T>(x: T): T;
    static Coalesce<T>(arg0: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, arg2: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, arg2: Optional<T>, arg3: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, arg2: Optional<T>, arg3: Optional<T>, arg4: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, arg2: Optional<T>, arg3: Optional<T>, arg4: Optional<T>, arg5: Optional<T>, def: T): T;
    static Coalesce<T>(arg0: Optional<T>, arg1: Optional<T>, arg2: Optional<T>, arg3: Optional<T>, arg4: Optional<T>, arg5: Optional<T>, arg6: Optional<T>, def: T): T;
    static ToPromise<T>(v: T | Promise<T>): Promise<T>;
}
